const { configs } = require('@eslint/js');
const typescriptEslint = require('@typescript-eslint/eslint-plugin');
const typescriptParser = require('@typescript-eslint/parser');
const prettierConfig = require('eslint-config-prettier');
const importPlugin = require('eslint-plugin-import');
const globals = require('globals');

module.exports = [
  configs.recommended,
  {
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'script',
      parser: typescriptParser,
      globals: {
        ...globals.node,
        ...globals.es2022,
        ...globals.jest
      }
    },
    plugins: {
      '@typescript-eslint': typescriptEslint,
      'import': importPlugin
    },
    rules: {
      // Suas regras baseadas no .eslintrc.cjs
      '@typescript-eslint/array-type': ['error', { default: 'array' }],
      'arrow-body-style': ['error', 'as-needed'],
      'prefer-arrow-callback': 'error',
      'curly': ['error', 'multi-line'],
      'guard-for-in': 'error',
      'indent': ['error', 'tab', { SwitchCase: 1 }],
      'no-mixed-spaces-and-tabs': ['error', 'smart-tabs'],
      '@typescript-eslint/explicit-member-accessibility': ['error', { accessibility: 'explicit' }],
      'new-parens': 'error',
      '@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'as' }],
      '@typescript-eslint/no-explicit-any': 'error',
      'no-caller': 'error',
      'no-cond-assign': ['error', 'except-parens'],
      'no-new-wrappers': 'error',
      'no-debugger': 'error',
      'import/no-default-export': 'error',
      'no-redeclare': 'error',
      '@typescript-eslint/no-inferrable-types': 'error',
      'import/order': ['error', {
        'groups': [
          'builtin', 'external', 'internal',
          ['parent', 'sibling', 'index'], 'object', 'type'
        ],
        'newlines-between': 'always',
        'alphabetize': { order: 'asc', caseInsensitive: true }
      }],
      '@typescript-eslint/no-namespace': ['error', { allowDeclarations: true }],
      '@typescript-eslint/triple-slash-reference': ['error', { path: 'never', types: 'never', lib: 'never' }],
      'no-throw-literal': 'error',
      '@typescript-eslint/no-unused-expressions': 'error',
      'no-var': 'error',
      'object-shorthand': ['error', 'always'],
      'func-style': ['error', 'expression', { allowArrowFunctions: true }],
      'prefer-const': 'error',
      'radix': 'error',
      '@typescript-eslint/semi': ['error', 'always'],
      'default-case': 'error',
      '@typescript-eslint/comma-dangle': ['error', {
        arrays: 'always-multiline',
        objects: 'always-multiline',
        imports: 'always-multiline',
        exports: 'always-multiline',
        functions: 'always-multiline',
        enums: 'always-multiline',
        generics: 'always-multiline',
        tuples: 'always-multiline'
      }],
      'eqeqeq': ['error', 'smart'],
      'use-isnan': 'error',
      '@typescript-eslint/quotes': ['error', 'single', { avoidEscape: true }],
      'no-useless-constructor': 'off',
      '@typescript-eslint/no-useless-constructor': 'error',
      '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
      '@typescript-eslint/consistent-type-exports': 'error',
      '@typescript-eslint/explicit-function-return-type': ['warn', { allowExpressions: true }]
    },
    ignores: [
      'dist',
      'node_modules',
      'coverage',
      '**/*.test.ts',
      '**/*.spec.ts'
    ]
  },
  // Configuração específica para arquivos de teste
  {
    files: ['**/*.test.ts', '**/*.spec.ts'],
    rules: {
      '@typescript-eslint/no-explicit-any': 'off',
      'import/no-default-export': 'off'
    }
  }
];
